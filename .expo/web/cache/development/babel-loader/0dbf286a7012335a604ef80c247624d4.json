{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { memo, useCallback, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { RTL_DIRECTION, RTL_STYLE } from \"../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction RenderBadge(_ref) {\n  var rtl = _ref.rtl,\n      label = _ref.label,\n      value = _ref.value,\n      textStyle = _ref.textStyle,\n      badgeStyle = _ref.badgeStyle,\n      badgeTextStyle = _ref.badgeTextStyle,\n      badgeDotStyle = _ref.badgeDotStyle,\n      getBadgeColor = _ref.getBadgeColor,\n      getBadgeDotColor = _ref.getBadgeDotColor,\n      showBadgeDot = _ref.showBadgeDot,\n      onPress = _ref.onPress,\n      THEME = _ref.THEME;\n\n  var __onPress = useCallback(function () {\n    return onPress(value);\n  }, [onPress, value]);\n\n  var _badgeStyle = useMemo(function () {\n    return [RTL_DIRECTION(rtl, THEME.badgeStyle)].concat(_toConsumableArray([badgeStyle].flat()), [{\n      backgroundColor: getBadgeColor(value)\n    }]);\n  }, [THEME, rtl, badgeStyle, getBadgeColor]);\n\n  var _badgeDotStyle = useMemo(function () {\n    return [RTL_STYLE(rtl, THEME.badgeDotStyle)].concat(_toConsumableArray([badgeDotStyle].flat()), [{\n      backgroundColor: getBadgeDotColor(value)\n    }]);\n  }, [THEME, rtl, badgeDotStyle, getBadgeDotColor]);\n\n  var _badgeTextStyle = useMemo(function () {\n    return [].concat(_toConsumableArray([textStyle].flat()), _toConsumableArray([badgeTextStyle].flat()));\n  }, [textStyle, badgeTextStyle]);\n\n  return _jsxs(TouchableOpacity, {\n    style: _badgeStyle,\n    onPress: __onPress,\n    children: [showBadgeDot && _jsx(View, {\n      style: _badgeDotStyle\n    }), _jsx(Text, {\n      style: _badgeTextStyle,\n      children: label\n    })]\n  });\n}\n\nvar areEqual = function areEqual(nextProps, prevProps) {\n  if (nextProps.label !== prevProps.label) return false;\n  if (nextProps.value !== prevProps.value) return false;\n  if (nextProps.showBadgeDot !== prevProps.showBadgeDot) return false;\n  if (nextProps.rtl !== prevProps.rtl) return false;\n  if (nextProps.theme !== prevProps.theme) return false;\n  return true;\n};\n\nexport default memo(RenderBadge, areEqual);","map":{"version":3,"sources":["/Users/vivien/Documents/AlcometerAssignment/node_modules/react-native-dropdown-picker/src/components/RenderBadgeItem.js"],"names":["React","memo","useCallback","useMemo","RTL_DIRECTION","RTL_STYLE","RenderBadge","rtl","label","value","textStyle","badgeStyle","badgeTextStyle","badgeDotStyle","getBadgeColor","getBadgeDotColor","showBadgeDot","onPress","THEME","__onPress","_badgeStyle","flat","backgroundColor","_badgeDotStyle","_badgeTextStyle","areEqual","nextProps","prevProps","theme"],"mappings":";AAAA,OAAOA,KAAP,IACIC,IADJ,EACUC,WADV,EACuBC,OADvB,QAEO,OAFP;;;;AAUA,SAASC,aAAT,EAAwBC,SAAxB;;;;AAEA,SAASC,WAAT,OAaG;AAAA,MAZCC,GAYD,QAZCA,GAYD;AAAA,MAXCC,KAWD,QAXCA,KAWD;AAAA,MAVCC,KAUD,QAVCA,KAUD;AAAA,MATCC,SASD,QATCA,SASD;AAAA,MARCC,UAQD,QARCA,UAQD;AAAA,MAPCC,cAOD,QAPCA,cAOD;AAAA,MANCC,aAMD,QANCA,aAMD;AAAA,MALCC,aAKD,QALCA,aAKD;AAAA,MAJCC,gBAID,QAJCA,gBAID;AAAA,MAHCC,YAGD,QAHCA,YAGD;AAAA,MAFCC,OAED,QAFCA,OAED;AAAA,MADCC,KACD,QADCA,KACD;;AAIC,MAAMC,SAAS,GAAGjB,WAAW,CAAC;AAAA,WAAMe,OAAO,CAACR,KAAD,CAAb;AAAA,GAAD,EAAuB,CAACQ,OAAD,EAAUR,KAAV,CAAvB,CAA7B;;AAMA,MAAMW,WAAW,GAAGjB,OAAO,CAAC;AAAA,YACxBC,aAAa,CAACG,GAAD,EAAMW,KAAK,CAACP,UAAZ,CADW,4BAErB,CAACA,UAAD,EAAaU,IAAb,EAFqB,IAEA;AACpBC,MAAAA,eAAe,EAAER,aAAa,CAACL,KAAD;AADV,KAFA;AAAA,GAAD,EAKvB,CAACS,KAAD,EAAQX,GAAR,EAAaI,UAAb,EAAyBG,aAAzB,CALuB,CAA3B;;AAWA,MAAMS,cAAc,GAAGpB,OAAO,CAAC;AAAA,YAC3BE,SAAS,CAACE,GAAD,EAAMW,KAAK,CAACL,aAAZ,CADkB,4BAExB,CAACA,aAAD,EAAgBQ,IAAhB,EAFwB,IAEA;AACvBC,MAAAA,eAAe,EAAEP,gBAAgB,CAACN,KAAD;AADV,KAFA;AAAA,GAAD,EAK1B,CAACS,KAAD,EAAQX,GAAR,EAAaM,aAAb,EAA4BE,gBAA5B,CAL0B,CAA9B;;AAWA,MAAMS,eAAe,GAAGrB,OAAO,CAAC;AAAA,wCACzB,CAACO,SAAD,EAAYW,IAAZ,EADyB,sBAEzB,CAACT,cAAD,EAAiBS,IAAjB,EAFyB;AAAA,GAAD,EAG3B,CAACX,SAAD,EAAYE,cAAZ,CAH2B,CAA/B;;AAKA,SACI,MAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEQ,WAAzB;AAAsC,IAAA,OAAO,EAAED,SAA/C;AAAA,eACKH,YAAY,IAAI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEO;AAAb,MADrB,EAEI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,eAAb;AAAA,gBAA+BhB;AAA/B,MAFJ;AAAA,IADJ;AAMH;;AAED,IAAMiB,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAYC,SAAZ,EAA0B;AACvC,MAAID,SAAS,CAAClB,KAAV,KAAoBmB,SAAS,CAACnB,KAAlC,EACI,OAAO,KAAP;AACJ,MAAIkB,SAAS,CAACjB,KAAV,KAAoBkB,SAAS,CAAClB,KAAlC,EACI,OAAO,KAAP;AACJ,MAAIiB,SAAS,CAACV,YAAV,KAA2BW,SAAS,CAACX,YAAzC,EACI,OAAO,KAAP;AACJ,MAAIU,SAAS,CAACnB,GAAV,KAAkBoB,SAAS,CAACpB,GAAhC,EACI,OAAO,KAAP;AACJ,MAAImB,SAAS,CAACE,KAAV,KAAoBD,SAAS,CAACC,KAAlC,EACI,OAAO,KAAP;AAEJ,SAAO,IAAP;AACH,CAbD;;AAeA,eAAe3B,IAAI,CAACK,WAAD,EAAcmB,QAAd,CAAnB","sourcesContent":["import React, {\n    memo, useCallback, useMemo\n} from 'react';\n\nimport {\n    View,\n    Text,\n    TouchableOpacity\n} from 'react-native';\n\nimport { RTL_DIRECTION, RTL_STYLE } from '../constants';\n\nfunction RenderBadge({\n    rtl,\n    label,\n    value,\n    textStyle,\n    badgeStyle,\n    badgeTextStyle,\n    badgeDotStyle,\n    getBadgeColor,\n    getBadgeDotColor,\n    showBadgeDot,\n    onPress,\n    THEME\n}) {\n    /**\n     * onPress.\n     */\n    const __onPress = useCallback(() => onPress(value), [onPress, value]);\n\n    /**\n     * The badge style.\n     * @returns {object}\n     */\n    const _badgeStyle = useMemo(() => ([\n        RTL_DIRECTION(rtl, THEME.badgeStyle),\n        ...[badgeStyle].flat(), {\n            backgroundColor: getBadgeColor(value)\n        }\n    ]), [THEME, rtl, badgeStyle, getBadgeColor]);\n\n    /**\n     * The badge dot style.\n     * @return {object}\n     */\n    const _badgeDotStyle = useMemo(() => ([\n        RTL_STYLE(rtl, THEME.badgeDotStyle),\n        ...[badgeDotStyle].flat(), {\n            backgroundColor: getBadgeDotColor(value)\n        }\n    ]), [THEME, rtl, badgeDotStyle, getBadgeDotColor]);\n\n    /**\n     * The badge text style.\n     * @returns {object}\n     */\n    const _badgeTextStyle = useMemo(() => ([\n        ...[textStyle].flat(),\n        ...[badgeTextStyle].flat()\n    ]), [textStyle, badgeTextStyle]);\n\n    return (\n        <TouchableOpacity style={_badgeStyle} onPress={__onPress}>\n            {showBadgeDot && <View style={_badgeDotStyle} />}\n            <Text style={_badgeTextStyle}>{label}</Text>\n        </TouchableOpacity>\n    );\n}\n\nconst areEqual = (nextProps, prevProps) => {\n    if (nextProps.label !== prevProps.label)\n        return false;\n    if (nextProps.value !== prevProps.value)\n        return false;\n    if (nextProps.showBadgeDot !== prevProps.showBadgeDot)\n        return false;\n    if (nextProps.rtl !== prevProps.rtl)\n        return false;\n    if (nextProps.theme !== prevProps.theme)\n        return false;\n\n    return true;\n}\n\nexport default memo(RenderBadge, areEqual);"]},"metadata":{},"sourceType":"module"}